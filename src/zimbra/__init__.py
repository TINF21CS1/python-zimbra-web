import logging
from typing import Optional
from dataclasses import dataclass, astuple
import uuid
from http import HTTPStatus

import requests


@dataclass
class SessionData:
    token: Optional[str] = None
    username: Optional[str] = None

    def is_valid(self) -> bool:
        """Returns True if no attributes are None"""
        return all(astuple(self))


class ZimbraUser:
    """
    This class represent a single user instance on the Zimbra Web Interface.
    """
    def __init__(self):
        self.session_data = SessionData()

    def login(self, username: str, password: str) -> bool:
        """
        Gets an authentication token from the Zimbra Web Client using username and password as authentication.

            Parameters:
                username (str): username to use for web authentication, without domain
                password (str): password to use for web authentication

            Returns:
                bool: True if authentication was successful
        """
        self.session_data.username = username

        cookies = {
            'ZM_TEST': 'true',  # keine Ahnung wof√ºr der Cookie gebraucht wird
        }

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; rv:91.0) Gecko/20100101 Firefox/91.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-GB,en;q=0.5',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Origin': 'https://studgate.dhbw-mannheim.de',
            'Referer': 'https://studgate.dhbw-mannheim.de/',
        }

        data = {
            'loginOp': 'login',
            'username': username,
            'password': password,
            'zrememberme': '1',
            'client': 'preferred'
        }

        response = requests.post(
            'https://studgate.dhbw-mannheim.de/zimbra/', cookies=cookies, headers=headers, data=data, allow_redirects=False)
        if "ZM_AUTH_TOKEN" in response.cookies:
            self.session_data.token = response.cookies["ZM_AUTH_TOKEN"]
            return self.authenticated
        else:
            if "The username or password is incorrect" in response.text:
                logging.error(
                    f"Failed login attempt for user {username}: Wrong credentials")
                return False
            logging.error(f"Failed login attempt for user {username}")
            return False

    def send_mail(self, to: str, subject: str, body: str,
                  cc: Optional[str] = "", bcc: Optional[str] = "", replyto: Optional[str] = "", inreplyto: Optional[str] = "", messageid: Optional[str] = ""):
        """
        Sends an email as the current user.

            Parameters:
                to (str): Recipient
                subject (str): Email Subject Header
                body (str): plain/text email body

            Extended Mail Parameters:
                cc (str): CC-Recipient
                bcc (str): BCC-Recipient
                replyto (str): Reply-To E-Mail field
                inreplyto (str): Message-ID of previous E-Mail
                messageid(str): Message-ID of this E-Mail. If none is passed, it will be generated by Zimbra


            Returns:
                status_code (int): The status code of the SendMailRequest
        """
        if not self.session_data.is_valid():
            return HTTPStatus.FORBIDDEN

        # generating uique senduid for every email.
        senduid = uuid.uuid4()

        boundary = "----WebKitFormBoundary2p5o8cSRRkhZkiza"

        cookies = {
            'ZM_TEST': 'true',
            'ZM_AUTH_TOKEN': self.session_data.token,
        }

        headers = {
            'Host': 'studgate.dhbw-mannheim.de',
            'Cache-Control': 'max-age=0',
            'Sec-Ch-Ua': '"Chromium";v="93", " Not;A Brand";v="99"',
            'Sec-Ch-Ua-Mobile': '?0',
            'Sec-Ch-Ua-Platform': '"Windows"',
            'Upgrade-Insecure-Requests': '1',
            'Origin': 'https://studgate.dhbw-mannheim.de',
            'Content-Type': f'multipart/form-data; boundary={boundary}',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-User': '?1',
            'Sec-Fetch-Dest': 'document',
            'Referer': 'https://studgate.dhbw-mannheim.de/zimbra/h/search?si=0&so=0&sc=178&sfi=5&st=message&action=compose',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'en-US,en;q=0.9',
            'Connection': 'close',
            'Content-Length': '3845',
        }

        params = (
            ('si', '0'),
            ('so', '0'),
            ('sc', '178'),
            ('sfi', '5'),
            ('st', 'message'),
            ('action', 'compose'),
        )

        data = '{boundary}\n\nContent-Disposition: form-data; name="actionSend"\n\n\n\nSenden\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="fileUpload"; filename=""\n\nContent-Type: application/octet-stream\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="to"\n\n\n\n{to}\n\n{boundary}\n\nContent-Disposition: form-data; name="cc"\n\n\n\n{cc}\n\n{boundary}\n\nContent-Disposition: form-data; name="bcc"\n\n\n\n{bcc}\n\n{boundary}\n\nContent-Disposition: form-data; name="subject"\n\n\n\n{subject}\n\n{boundary}\n\nContent-Disposition: form-data; name="originalAttachment"\n\n\n\n2,true\n\n{boundary}\n\nContent-Disposition: form-data; name="body"\n\n{body}\n\n{boundary}\n\nContent-Disposition: form-data; name="bodyText"\n\n\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="sendUID"\n\n\n\n{senduid}\n\n{boundary}\n\nContent-Disposition: form-data; name="replyto"\n\n\n\n{replyto}\n\n{boundary}\n\nContent-Disposition: form-data; name="from"\n\n\n\n<{username}@student.dhbw-mannheim.de>\n\n{boundary}\n\nContent-Disposition: form-data; name="inreplyto"\n\n\n\n{inreplyto}\n\n{boundary}\n\nContent-Disposition: form-data; name="messageid"\n\n\n\n{messageid}\n\n{boundary}\n\nContent-Disposition: form-data; name="compNum"\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="instCompNum"\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="replytype"\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="inviteReplyVerb"\n\n\n\n\n\n{boundary}\n\nContent-Disposition: form-data; name="inviteReplyInst"\n\n\n\n0\n\n{boundary}\n\nContent-Disposition: form-data; name="inviteReplyAllDay"\n\n\n\nfalse\n\n{boundary}\n\nContent-Disposition: form-data; name="crumb"\n\n\n\nfe7f0443268a76d824738c329c1f45c6\n\n{boundary}\n\nContent-Disposition: form-data; name="draftid"\n\n\n\n\n\n{boundary}--\n\n'.format(
            boundary=boundary, username=self.session_data.username, to=to, cc=cc, bcc=bcc, inreplyto=inreplyto, replyto=replyto, senduid=senduid, messageid=messageid, subject=subject, body=body)

        logging.debug(
            f"REQUEST:\n {headers} \n {params} \n {cookies} \n {data}")

        response = requests.post('https://studgate.dhbw-mannheim.de/zimbra/h/search',
                                 headers=headers, params=params, cookies=cookies, data=data)

        logging.debug(f"RESPONSE:\n {response.text}")

        return response.status_code

    @property
    def authenticated(self):
        return self.session_data.is_valid()
